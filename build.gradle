buildscript {
    repositories {
        maven {
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-20160116.192356-17'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'gradle.plugin.net.minecrell:licenser:0.2.1'
    }
}

apply plugin: 'net.minecraftforge.gradle.tweaker-server'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecrell.licenser'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext.mcVersion  = '1.8.9'
ext.apiVersion = '1.2.1-20161002.122010-8'

group = 'org.neptunepowered'
archivesBaseName = project.name.toLowerCase()
version = "$mcVersion-$apiVersion"

repositories {
    mavenCentral()
    maven {
        name = 'lex-releases'
        url = 'http://repo.lexteam.xyz/maven/releases/'
    }
    maven {
        name = 'lex-snapshots'
        url = 'http://repo.lexteam.xyz/maven/snapshots/'
    }
    maven {
        name = 'vi-repo'
        url = 'http://repo.visualillusionsent.net/repository/internal'
    }
    maven {
        name = 'vi-snapshots'
        url = 'http://repo.visualillusionsent.net/repository/snapshots'
    }
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
    maven {
        name = 'mcstats-releases'
        url = 'http://repo.mcstats.org/content/repositories/releases'
    }
    maven {
        name = 'mcstats-snapshots'
        url = 'http://repo.mcstats.org/content/repositories/snapshots'
    }
    maven {
        name = 'aikar'
        url = 'https://ci.emc.gs/nexus/content/repositories/aikar/'
    }
}

configurations {
    shadow
}

dependencies {
    compile "org.neptunepowered:NeptuneLib:$apiVersion"
    compile 'co.aikar:fastutil-lite:1.0'
    compile('org.spongepowered:mixin:0.5.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    compile 'org.ow2.asm:asm-debug-all:5.1'
    compile 'jline:jline:2.14.2'

    shadow 'org.ow2.asm:asm-all:5.1'
    shadow 'net.sf.jopt-simple:jopt-simple:4.6'
}

license {
    header file('HEADER.txt')
    exclude 'co/aikar/**'
    newLine = false
}

minecraft {
    version = mcVersion
    mappings = 'snapshot_20160301'
    runDir = 'run'

    tweakClass = 'org.neptunepowered.vanilla.launch.NeptuneServerTweaker'
    atSource sourceSets.main

    makeObfSourceJar = false
}

sourceSets {
    main {
        refMap = 'mixins.vanilla.refmap.json'
    }
}

// Source compiler configuration
configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
        showStandardStreams = true
    }
}

jar {
    classifier = 'base'
    manifest {
        attributes(
                'Main-Class': 'org.neptunepowered.vanilla.launch.NeptuneServerMain',
                'Class-Path': 'minecraft_server.1.8.9.jar libraries/net/minecraft/launchwrapper/1.12/launchwrapper-1.12.jar'
        )
    }
}

// Reobfuscate to SRG mappings
reobf.jar.mappingType = 'SEARGE'

shadowJar {
    classifier = ''
    configurations += [project.configurations.shadow]

    // Clear the current source set
    // TODO: Find a better way for this, will likely break in the future
    mainSpec.sourcePaths.clear()

    dependsOn reobfJar

    // Wait for reobf task to be fully configured
    afterEvaluate {
        // Include obfuscated classes
        from zipTree(reobfJar.jar)
    }

    // Exclude ForgeGradle classes from shaded JAR
    exclude 'GradleStart**'
    exclude 'net/minecraftforge/**'
    exclude 'dummyThing'

    from plugins.getPlugin('net.minecraftforge.gradle.tweaker-server').delayedFile(net.minecraftforge.gradle.common.Constants.MCP_DATA_SRG)
    rename 'joined.srg', 'mappings.srg'

    dependencies {
        include dependency('org.neptunepowered:NeptuneLib')
        include dependency('org.spongepowered:mixin')

        // CanaryLib
        include dependency('net.visualillusionsent:viutils')
        include dependency('org.jdom:jdom2')
        include dependency('com.mchange:c3p0')
        include dependency('com.googlecode.json-simple:json-simple')
        include dependency('org.mcstats.standalone:metrics')

        // LaunchWrapper
        include dependency('net.sf.jopt-simple:jopt-simple')
        include dependency('org.ow2.asm:asm-all')
        include dependency('jline:jline')
    }
}

task sourceJar(type: Jar, overwrite: true) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'

    // Disable the crazy super-strict doclint tool in Java 8
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives shadowJar
    archives sourceJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}
