From bc87cd0575198b257e1a740e7004ddb6aca3f7cf Mon Sep 17 00:00:00 2001
From: Jamie Mansfield <dev@jamierocks.uk>
Date: Fri, 6 Jan 2017 18:41:49 +0000
Subject: [PATCH] Overhaul configuration caching


diff --git a/src/main/java/net/canarymod/config/Configuration.java b/src/main/java/net/canarymod/config/Configuration.java
index 599f4e25..093e85df 100644
--- a/src/main/java/net/canarymod/config/Configuration.java
+++ b/src/main/java/net/canarymod/config/Configuration.java
@@ -4,8 +4,9 @@ import net.canarymod.api.world.World;
 import net.canarymod.plugin.Plugin;
 import net.visualillusionsent.utils.PropertiesFile;
 
+import org.neptunepowered.lib.config.ConfigurationProvider;
+
 import java.io.File;
-import java.util.HashMap;
 
 /**
  * A caching configuration provider.
@@ -16,10 +17,10 @@ import java.util.HashMap;
  */
 public class Configuration {
 
-    private static HashMap<Plugin, HashMap<String, PropertiesFile>> plugin_cfg_cache = new HashMap<Plugin, HashMap<String, PropertiesFile>>();
+    /*private static HashMap<Plugin, HashMap<String, PropertiesFile>> plugin_cfg_cache = new HashMap<Plugin, HashMap<String, PropertiesFile>>();*/ // Neptune
     private static ServerConfiguration serverConfig = new ServerConfiguration("config" + File.separatorChar + "server.cfg");
     private static DatabaseConfiguration dbConfig = new DatabaseConfiguration("config" + File.separatorChar + "db.cfg");
-    private static HashMap<String, WorldConfiguration> worldConfigs = new HashMap<String, WorldConfiguration>();
+    /*private static HashMap<String, WorldConfiguration> worldConfigs = new HashMap<String, WorldConfiguration>();*/ // Neptune
 
     /**
      * Reload all configuration from disk
@@ -29,14 +30,19 @@ public class Configuration {
         dbConfig.reload();
 
         // Reload world configurations
+        /*
         for (WorldConfiguration wc : worldConfigs.values()) {
             wc.reload();
         }
+        */ConfigurationProvider.reloadWorldConfigs();
 
         // Clear the cache
+        /*
         plugin_cfg_cache.clear();
+        */ConfigurationProvider.clearAllCaches();
     }
 
+    /*
     private static PropertiesFile getPluginCachedConfig(Plugin plugin, String filepath) {
         if (!plugin_cfg_cache.containsKey(plugin)) {
             plugin_cfg_cache.put(plugin, new HashMap<String, PropertiesFile>());
@@ -49,6 +55,7 @@ public class Configuration {
         }
         return plugin_cfg_cache.get(plugin).get(filepath);
     }
+    */
 
     /**
      * Gets the server configuration
@@ -77,6 +84,7 @@ public class Configuration {
      * @return world configuration
      */
     public static WorldConfiguration getWorldConfig(String world) {
+        /*
         WorldConfiguration r = worldConfigs.get(world);
         if (r != null) {
             return r;
@@ -86,6 +94,7 @@ public class Configuration {
 
         worldConfigs.put(world, config);
         return config;
+        */return ConfigurationProvider.getWorldConfig(world);
     }
 
     /**
@@ -97,7 +106,9 @@ public class Configuration {
      * @return configuration of a {@link Plugin}
      */
     public static PropertiesFile getPluginConfig(Plugin plugin) {
+        /*
         return Configuration.getPluginCachedConfig(plugin, "config" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + ".cfg");
+        */return ConfigurationProvider.getConfigurationProvider(plugin.getName()).getPluginConfig();
     }
 
     /**
@@ -111,7 +122,9 @@ public class Configuration {
      * @return configuration of a {@link Plugin}
      */
     public static PropertiesFile getPluginConfig(Plugin plugin, String module) {
+        /*
         return Configuration.getPluginCachedConfig(plugin, "config" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + "." + module + ".cfg");
+        */return ConfigurationProvider.getConfigurationProvider(plugin.getName()).getPluginModuleConfig(module);
     }
 
     /**
@@ -126,12 +139,14 @@ public class Configuration {
      * @return configuration of a {@link Plugin}
      */
     public static PropertiesFile getPluginConfig(Plugin plugin, World world) {
+        /*
         PropertiesFile file = Configuration.getPluginCachedConfig(plugin, "config" + File.separatorChar + plugin.getName() + File.separatorChar + "worlds" + File.separatorChar + world.getFqName() + File.separatorChar + plugin.getName() + ".cfg");
 
         if (file == null) {
             file = Configuration.getPluginCachedConfig(plugin, "config" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + ".cfg");
         }
         return file;
+        */return ConfigurationProvider.getConfigurationProvider(plugin.getName()).getPluginWorldConfig(world.getFqName());
     }
 
     /**
@@ -148,12 +163,14 @@ public class Configuration {
      * @return configuration of a {@link Plugin}
      */
     public static PropertiesFile getPluginConfig(Plugin plugin, String module, World world) {
+        /*
         PropertiesFile file = Configuration.getPluginCachedConfig(plugin, "config" + File.separatorChar + plugin.getName() + File.separatorChar + "worlds" + File.separatorChar + world.getFqName() + File.separatorChar + plugin.getName() + "." + module + ".cfg");
 
         if (file == null) {
             file = Configuration.getPluginCachedConfig(plugin, "config" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + "." + module + ".cfg");
         }
         return file;
+        */return ConfigurationProvider.getConfigurationProvider(plugin.getName()).getPluginModuleWorldConfig(module, world.getFqName());
     }
 
     /**
@@ -164,11 +181,15 @@ public class Configuration {
      */
     public static void clearPluginCachedConfigs(Plugin plugin) {
         if (plugin != null && plugin.isDisabled()) { // Make sure the plugin really needs a clean up
+            /*
             Configuration.plugin_cfg_cache.remove(plugin);
+            */ConfigurationProvider.getConfigurationProvider(plugin.getName()).clearCache();
         }
     }
 
     static boolean hasWorldConfig(String name) {
+        /*
         return worldConfigs.containsKey(name);
+         */return ConfigurationProvider.isWorldConfigCached(name);
     }
 }
diff --git a/src/main/java/org/neptunepowered/lib/config/ConfigurationProvider.java b/src/main/java/org/neptunepowered/lib/config/ConfigurationProvider.java
new file mode 100644
index 00000000..42c3affd
--- /dev/null
+++ b/src/main/java/org/neptunepowered/lib/config/ConfigurationProvider.java
@@ -0,0 +1,169 @@
+/*
+ * This file is part of NeptuneLib, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2016-2017, Jamie Mansfield <https://www.jamierocks.uk/>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package org.neptunepowered.lib.config;
+
+import com.github.benmanes.caffeine.cache.Caffeine;
+import com.github.benmanes.caffeine.cache.LoadingCache;
+import net.canarymod.config.WorldConfiguration;
+import net.visualillusionsent.utils.PropertiesFile;
+
+import java.io.File;
+
+/**
+ * A configuration provider for Canary plugins, in addition to
+ * methods to obtain them.
+ */
+public final class ConfigurationProvider {
+
+    private static LoadingCache<String, ConfigurationProvider> configProviderCache = Caffeine.newBuilder()
+            .build(ConfigurationProvider::new);
+
+    /**
+     * Gets a plugin configuration provider for the plugin of the
+     * specified name.
+     *
+     * @param pluginName The name of the plugin
+     * @return The configuration provider
+     */
+    public static ConfigurationProvider getConfigurationProvider(String pluginName) {
+        return configProviderCache.get(pluginName);
+    }
+
+    /**
+     * Clears all of the caches of all the cached configuration providers.
+     */
+    public static void clearAllCaches() {
+        configProviderCache.asMap().keySet().stream()
+                .map(ConfigurationProvider::getConfigurationProvider)
+                .forEach(ConfigurationProvider::clearCache);
+    }
+
+    private static LoadingCache<String, WorldConfiguration> worldConfigCache = Caffeine.newBuilder()
+            .build(key -> {
+                final String[] split = key.split("_");
+                return new WorldConfiguration("config" + File.separatorChar + "worlds" + File.separatorChar + split[0], key);
+            });
+
+    /**
+     * Gets a world configuration for the world of the specified
+     * name.
+     *
+     * @param worldName The name of the world
+     * @return The world configuration
+     */
+    public static WorldConfiguration getWorldConfig(String worldName) {
+        return worldConfigCache.get(worldName);
+    }
+
+    /**
+     * Reloads all of the cached world configurations.
+     */
+    public static void reloadWorldConfigs() {
+        worldConfigCache.asMap().values()
+                .forEach(WorldConfiguration::reload);
+    }
+
+    /**
+     * Establishes whether a world configuration for the specified
+     * world has been cached.
+     *
+     * @param worldName The name of the world
+     * @return {@code True} if a world configuration is cached for
+     *         the specified world, {@code false} otherwise
+     */
+    public static boolean isWorldConfigCached(String worldName) {
+        return worldConfigCache.asMap().containsKey(worldName);
+    }
+
+    private LoadingCache<String, PropertiesFile> configCache = Caffeine.newBuilder()
+            .build(key -> {
+                final PropertiesFile propertiesFile = new PropertiesFile(key);
+                propertiesFile.save();
+                return propertiesFile;
+            });
+
+    private final String pluginName;
+
+    /**
+     * Creates a new plugin configuration provider, for the plugin of
+     * the specified name.
+     *
+     * @param pluginName The name of the plugin
+     */
+    private ConfigurationProvider(String pluginName) {
+        this.pluginName = pluginName;
+    }
+
+    /**
+     * Gets the configuration of the plugin the provider supports.
+     *
+     * @return The plugin's configuration
+     */
+    public PropertiesFile getPluginConfig() {
+        return this.configCache.get("config" + File.separatorChar + this.pluginName + File.separatorChar + this.pluginName + ".cfg");
+    }
+
+    /**
+     * Gets the module configuration of the plugin the provider
+     * supports.
+     *
+     * @param moduleName The name of the plugin module
+     * @return The plugin's module configuration
+     */
+    public PropertiesFile getPluginModuleConfig(String moduleName) {
+        return this.configCache.get("config" + File.separatorChar + this.pluginName + File.separatorChar + this.pluginName + "." + moduleName + ".cfg");
+    }
+
+    /**
+     * Gets the world configuration of the plugin the provider
+     * supports.
+     *
+     * @param worldName The name of the world
+     * @return The plugin's world configuration
+     */
+    public PropertiesFile getPluginWorldConfig(String worldName) {
+        return this.configCache.get("config" + File.separatorChar + this.pluginName + File.separatorChar + "worlds" + File.separatorChar + worldName + File.separatorChar + this.pluginName + ".cfg");
+    }
+
+    /**
+     * Gets the module world configuration of the plugin the
+     * provider supports.
+     *
+     * @param moduleName The name of the plugin module
+     * @param worldName The name of the world
+     * @return The plugin's world module configuration
+     */
+    public PropertiesFile getPluginModuleWorldConfig(String moduleName, String worldName) {
+        return this.configCache.get("config" + File.separatorChar + this.pluginName + File.separatorChar + "worlds" + File.separatorChar + worldName + File.separatorChar + this.pluginName + "." + moduleName + ".cfg");
+    }
+
+    /**
+     * Clears the cache.
+     */
+    public void clearCache() {
+        this.configCache.invalidateAll();
+    }
+
+}
-- 
2.14.1

