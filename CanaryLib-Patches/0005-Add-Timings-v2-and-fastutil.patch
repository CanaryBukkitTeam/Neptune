From 7dd4bb465e5915a22c7b35689fe36df55f7d5235 Mon Sep 17 00:00:00 2001
From: Jamie Mansfield <dev@jamierocks.uk>
Date: Fri, 30 Sep 2016 21:44:56 +0100
Subject: [PATCH] Add Timings v2 and fastutil

Based on the source from SpongeAPI

diff --git a/build.gradle b/build.gradle
index 504ff52..8cf2873 100644
--- a/build.gradle
+++ b/build.gradle
@@ -32,6 +32,10 @@ repositories {
         name = 'mcstats-snapshots'
         url = 'http://repo.mcstats.org/content/repositories/snapshots'
     }
+    maven {
+        name = 'aikar'
+        url = 'https://ci.emc.gs/nexus/content/repositories/aikar/'
+    }
 }
 
 dependencies {
@@ -43,6 +47,7 @@ dependencies {
     compile 'com.mojang:authlib:1.5.21'
     compile 'com.googlecode.json-simple:json-simple:1.1.1'
     compile 'org.mcstats.standalone:metrics:R7'
+    compile 'co.aikar:fastutil-lite:1.0'
     runtime 'org.xerial:sqlite-jdbc:3.8.7'
     runtime 'mysql:mysql-connector-java:5.1.34'
     testCompile 'junit:junit:4.12'
diff --git a/src/main/java/co/aikar/timings/Timing.java b/src/main/java/co/aikar/timings/Timing.java
new file mode 100644
index 0000000..c5ce1a2
--- /dev/null
+++ b/src/main/java/co/aikar/timings/Timing.java
@@ -0,0 +1,69 @@
+/*
+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) SpongePowered <https://www.spongepowered.org>
+ * Copyright (c) contributors
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package co.aikar.timings;
+
+/**
+ * Provides an ability to time sections of code within the server.
+ */
+public interface Timing extends AutoCloseable {
+
+    /**
+     * Starts timing the execution until {@link #stopTiming} is called.
+     *
+     * @return This timing, for chaining
+     */
+    Timing startTiming();
+
+    /**
+     * Stops timing and records the data. Propagates the data up to group
+     * handlers. <p/> Will automatically be called when this timing is used with
+     * try-with-resources.
+     */
+    void stopTiming();
+
+    /**
+     * Starts timing the execution until {@link #stopTiming} is called only if
+     * called from the main server thread.
+     */
+    void startTimingIfSync();
+
+    /**
+     * Stops timing and records the data. Propagates the data up to group
+     * handlers. <p/> Will automatically be called when this timing is used with
+     * try-with-resources.
+     *
+     * <p>But only if called from the main server thread.</p>
+     */
+    void stopTimingIfSync();
+
+    /**
+     * Stops timing and disregards current timing data.
+     */
+    void abort();
+
+    @Override
+    void close();
+
+}
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
new file mode 100644
index 0000000..d40e21d
--- /dev/null
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -0,0 +1,222 @@
+/*
+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) SpongePowered <https://www.spongepowered.org>
+ * Copyright (c) contributors
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package co.aikar.timings;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
+import net.canarymod.chat.MessageReceiver;
+import net.canarymod.plugin.Plugin;
+import net.canarymod.tasks.ServerTask;
+import net.canarymod.tasks.TaskOwner;
+
+import javax.annotation.Nullable;
+
+/**
+ * Utility class for creating and configuring timings.
+ */
+public final class Timings {
+
+    private static final TimingsFactory factory = null;
+
+    private Timings() {
+    }
+
+    /**
+     * Gets a {@link Timing} for a plugin corresponding to a name.
+     *
+     * @param plugin The plugin instance to own the timing
+     * @param name Name of the timing
+     * @return A {@link Timing} instance
+     */
+    public static Timing of(Plugin plugin, String name) {
+        return factory.of(checkNotNull(plugin, "plugin"), checkNotNull(name, "name"), null);
+    }
+
+    /**
+     * Gets a handler that has a groupHandler timer handler. Parent timers
+     * should not have their start/stop methods called directly, as the children
+     * will call it for you. <p/> Parent timers are used to group multiple
+     * subsections together and get a summary of them combined parent handler
+     * can not be changed after first call.
+     *
+     * @param plugin The plugin instance to own the timing
+     * @param name Name of the timing
+     * @param groupHandler Parent handler to mirror .start/stop calls to
+     * @return A {@link Timing} instance
+     */
+    public static Timing of(Plugin plugin, String name, Timing groupHandler) {
+        return factory.of(checkNotNull(plugin, "plugin"), checkNotNull(name, "name"), checkNotNull(groupHandler, "groupHandler"));
+    }
+
+    /**
+     * Returns a {@link Timing} object after starting it, useful for
+     * try-with-resources.</p>
+     *
+     * <pre>
+     * try (Timing ignored = Timings.ofStart(plugin, someName)) {
+     *     // timed section
+     * }
+     * </pre>
+     *
+     * @param plugin Plugin to own the timing
+     * @param name Name of timing
+     * @return A {@link Timing} instance
+     */
+    public static Timing ofStart(Plugin plugin, String name) {
+        Timing timing = of(plugin, name);
+        timing.startTimingIfSync();
+        return timing;
+    }
+
+    /**
+     * Returns a {@link Timing} object after starting it, useful for
+     * try-with-resources.</p>
+     *
+     * <pre>
+     * try (Timing ignored = Timings.ofStart(plugin, someName,
+     *         groupHandler)) {
+     *     // timed section
+     * }
+     * </pre>
+     *
+     * @param plugin Plugin to own the timing
+     * @param name Name of timing
+     * @param groupHandler Parent handler to mirror start/stop calls to
+     * @return A {@link Timing} instance
+     */
+    public static Timing ofStart(Plugin plugin, String name, Timing groupHandler) {
+        Timing timing = of(plugin, name, groupHandler);
+        timing.startTimingIfSync();
+        return timing;
+    }
+
+    public static Timing of(TaskOwner owner, ServerTask task) {
+        return factory.of(checkNotNull(owner, "owner"), checkNotNull(task, "task"));
+    }
+
+    /**
+     * Gets whether or not the timings system is enabled.
+     *
+     * @return Enabled or not
+     */
+    public static boolean isTimingsEnabled() {
+        return factory.isTimingsEnabled();
+    }
+
+    /**
+     * Sets whether or not the timings system should be enabled. <p/> Calling
+     * this will reset timing data.
+     *
+     * @param enabled Should timings be reported
+     */
+    public static void setTimingsEnabled(boolean enabled) {
+        factory.setTimingsEnabled(enabled);
+    }
+
+    /**
+     * Gets whether or not the verbose level of timings is enabled. <p/> When
+     * verbose is disabled, high-frequency timings will not be available.
+     *
+     * @return Enabled or not
+     */
+    public static boolean isVerboseTimingsEnabled() {
+        return factory.isVerboseTimingsEnabled();
+    }
+
+    /**
+     * Sets whether or not the timings should monitor at verbose level. <p/>
+     * When verbose is disabled, high-frequency timings will not be available.
+     * Calling this will reset timing data.
+     *
+     * @param enabled Should high-frequency timings be reported
+     */
+    public static void setVerboseTimingsEnabled(boolean enabled) {
+        factory.setVerboseTimingsEnabled(enabled);
+    }
+
+    /**
+     * Gets the interval between timing history report generation.
+     *
+     * @return Interval in ticks
+     */
+    public static int getHistoryInterval() {
+        return factory.getHistoryInterval();
+    }
+
+    /**
+     * Sets the interval between timing history report generations.
+     *
+     * <p>This will re-check your history length, so lowering this value will lower
+     * your history length if you need more than 60 history windows.</p>
+     *
+     * @param interval Interval in ticks
+     */
+    public static void setHistoryInterval(int interval) {
+        factory.setHistoryInterval(interval);
+    }
+
+    /**
+     * Gets how long in ticks timings history is kept for the server.
+     *
+     * @return Duration in ticks
+     */
+    public static int getHistoryLength() {
+        return factory.getHistoryLength();
+    }
+
+    /**
+     * Sets how long timing history reports are kept for the server.
+     *
+     * <p>This value is capped at a maximum of getHistoryInterval() *
+     * MAX_HISTORY_FRAMES (12).</p>
+     *
+     * <p>Will not reset timing data but may truncate old history if the new length
+     * is less than old length.</p>
+     *
+     * @param length Duration in ticks
+     */
+    public static void setHistoryLength(int length) {
+        factory.setHistoryLength(length);
+    }
+
+    /**
+     * Resets all timing data.
+     */
+    public static void reset() {
+        factory.reset();
+    }
+
+    /**
+     * Generates a report and sends it to the specified command source.
+     *
+     * <p>If source is null, the {@link MessageReceiver} will be used.</p>
+     *
+     * @param source The source to show the report to
+     */
+    public static void generateReport(@Nullable MessageReceiver source) {
+        factory.generateReport(source);
+    }
+
+}
diff --git a/src/main/java/co/aikar/timings/TimingsFactory.java b/src/main/java/co/aikar/timings/TimingsFactory.java
new file mode 100644
index 0000000..50ff0f1
--- /dev/null
+++ b/src/main/java/co/aikar/timings/TimingsFactory.java
@@ -0,0 +1,126 @@
+/*
+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) SpongePowered <https://www.spongepowered.org>
+ * Copyright (c) contributors
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package co.aikar.timings;
+
+import net.canarymod.chat.MessageReceiver;
+import net.canarymod.plugin.Plugin;
+import net.canarymod.tasks.ServerTask;
+import net.canarymod.tasks.TaskOwner;
+
+import javax.annotation.Nullable;
+
+/**
+ * A factory for the required implementation of {@link Timings}.
+ */
+public interface TimingsFactory {
+
+    /**
+     * Gets or creates a timing instance for the plugin with the given name.
+     *
+     * @param plugin Plugin owning the timing
+     * @param name Name of the timing
+     * @param groupHandler The handler, can be null for no parent
+     * @return A timing instance
+     */
+    Timing of(Plugin plugin, String name, @Nullable Timing groupHandler);
+
+    /**
+     * Gets or create a timing instance for the task owner with the name of the given task.
+     *
+     * @param owner TaskOwner owning the task
+     * @param task The task
+     * @return A timing instance
+     */
+    Timing of(TaskOwner owner, ServerTask task);
+
+    /**
+     * Gets whether the timing system is enabled.
+     *
+     * @return Whether enabled
+     */
+    boolean isTimingsEnabled();
+
+    /**
+     * Sets whether the timing system is enabled.
+     *
+     * @param enabled Is enabled or not
+     */
+    void setTimingsEnabled(boolean enabled);
+
+    /**
+     * Gets whether verbose mode is enabled.
+     *
+     * @return Whether verbose mode is enabled
+     */
+    boolean isVerboseTimingsEnabled();
+
+    /**
+     * Sets whether verbose mode is enabled.
+     *
+     * @param enabled Is enabled
+     */
+    void setVerboseTimingsEnabled(boolean enabled);
+
+    /**
+     * Gets the history interval.
+     *
+     * @return The history interval in ticks
+     */
+    int getHistoryInterval();
+
+    /**
+     * Sets the history interval.
+     *
+     * @param interval The interval in ticks
+     */
+    void setHistoryInterval(int interval);
+
+    /**
+     * Gets the history length.
+     *
+     * @return History length
+     */
+    int getHistoryLength();
+
+    /**
+     * Sets the history length.
+     *
+     * @param length History length
+     */
+    void setHistoryLength(int length);
+
+    /**
+     * Resets the timing data.
+     */
+    void reset();
+
+    /**
+     * Generates a report and sends to the given source.
+     *
+     * @param source Source to send to, null for console source
+     */
+    void generateReport(@Nullable MessageReceiver source);
+
+}
diff --git a/src/main/java/net/canarymod/config/Configuration.java b/src/main/java/net/canarymod/config/Configuration.java
index 599f4e2..559d5a3 100644
--- a/src/main/java/net/canarymod/config/Configuration.java
+++ b/src/main/java/net/canarymod/config/Configuration.java
@@ -3,6 +3,7 @@ package net.canarymod.config;
 import net.canarymod.api.world.World;
 import net.canarymod.plugin.Plugin;
 import net.visualillusionsent.utils.PropertiesFile;
+import org.neptunepowered.lib.config.TimingsConfiguration;
 
 import java.io.File;
 import java.util.HashMap;
@@ -19,6 +20,7 @@ public class Configuration {
     private static HashMap<Plugin, HashMap<String, PropertiesFile>> plugin_cfg_cache = new HashMap<Plugin, HashMap<String, PropertiesFile>>();
     private static ServerConfiguration serverConfig = new ServerConfiguration("config" + File.separatorChar + "server.cfg");
     private static DatabaseConfiguration dbConfig = new DatabaseConfiguration("config" + File.separatorChar + "db.cfg");
+    private static TimingsConfiguration timingsConfig = new TimingsConfiguration("config" + File.separator + "timings.cfg");
     private static HashMap<String, WorldConfiguration> worldConfigs = new HashMap<String, WorldConfiguration>();
 
     /**
@@ -68,6 +70,10 @@ public class Configuration {
         return dbConfig;
     }
 
+    public static TimingsConfiguration getTimingsConfig() {
+        return timingsConfig;
+    }
+
     /**
      * Get the world configuration for the specified world
      *
diff --git a/src/main/java/net/canarymod/tasks/ServerTask.java b/src/main/java/net/canarymod/tasks/ServerTask.java
index 6eb609d..dd380fe 100644
--- a/src/main/java/net/canarymod/tasks/ServerTask.java
+++ b/src/main/java/net/canarymod/tasks/ServerTask.java
@@ -1,5 +1,7 @@
 package net.canarymod.tasks;
 
+import co.aikar.timings.Timing; // Neptune
+import co.aikar.timings.Timings;
 import net.canarymod.plugin.Plugin;
 
 /**
@@ -17,6 +19,7 @@ public abstract class ServerTask {
     private final boolean continuous;
     private final TaskOwner owner;
     private long delay;
+    private Timing timings; // Neptune
 
     /**
      * Constructs a one-time use ServerTask
@@ -76,6 +79,7 @@ public abstract class ServerTask {
         this.delay = delay;
         this.continuous = continuous;
         this.owner = owner;
+        this.timings = Timings.of(owner, this);
     }
 
     /**
@@ -101,6 +105,17 @@ public abstract class ServerTask {
      */
     public abstract void run();
 
+    // Neptune - start
+    /**
+     * Executes the task with timings.
+     */
+    public void runTimed() {
+        this.timings.startTimingIfSync();
+        this.run();
+        this.timings.stopTimingIfSync();
+    }
+    // Neptune - end
+
     /**
      * Called when a Continuous Task is reset.<br>
      * Override and set any logic you may need to also have reset with each run.
diff --git a/src/main/java/net/canarymod/tasks/ServerTaskManager.java b/src/main/java/net/canarymod/tasks/ServerTaskManager.java
index 32e9b81..9829b51 100644
--- a/src/main/java/net/canarymod/tasks/ServerTaskManager.java
+++ b/src/main/java/net/canarymod/tasks/ServerTaskManager.java
@@ -1,5 +1,7 @@
 package net.canarymod.tasks;
 
+import static net.canarymod.Canary.log;
+
 import net.canarymod.plugin.Plugin;
 
 import java.util.ArrayList;
@@ -8,8 +10,6 @@ import java.util.List;
 import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 
-import static net.canarymod.Canary.log;
-
 /**
  * Server Task Manager
  * <p/>
@@ -127,7 +127,7 @@ public final class ServerTaskManager {
                 task.decrementDelay();
                 if (task.shouldExecute()) {
                     try {
-                        task.run();
+                        task.runTimed(); // Neptune - timings
                     }
                     catch (Throwable thrown) {
                         log.error("An Exception occurred while executing ServerTask: " + task.getClass().getSimpleName(), thrown);
diff --git a/src/main/java/org/neptunepowered/lib/config/TimingsConfiguration.java b/src/main/java/org/neptunepowered/lib/config/TimingsConfiguration.java
new file mode 100644
index 0000000..7339dc5
--- /dev/null
+++ b/src/main/java/org/neptunepowered/lib/config/TimingsConfiguration.java
@@ -0,0 +1,89 @@
+/*
+ * This file is part of NeptuneLib, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2016, Jamie Mansfield <https://www.jamierocks.uk/>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+package org.neptunepowered.lib.config;
+
+import static net.canarymod.Canary.log;
+
+import net.canarymod.config.ConfigurationContainer;
+import net.visualillusionsent.utils.PropertiesFile;
+
+import java.io.File;
+
+/**
+ * Timings configuration container.
+ *
+ * @author Jamie Mansfield (jamierocks)
+ */
+public class TimingsConfiguration implements ConfigurationContainer {
+
+    private final PropertiesFile cfg;
+
+    public TimingsConfiguration(String path) {
+        final File test = new File(path);
+        if (!test.exists()) {
+            log.warn("Could not find the timings configuration at {}, creating default.", path);
+        }
+
+        this.cfg = new PropertiesFile(path);
+        verifyConfig();
+    }
+
+    @Override
+    public void reload() {
+        this.cfg.reload();
+        this.verifyConfig();
+    }
+
+    @Override
+    public PropertiesFile getFile() {
+        return this.cfg;
+    }
+
+    private void verifyConfig() {
+        this.cfg.clearHeader();
+        this.cfg.getBoolean("verbose", false);
+        this.cfg.getBoolean("enabled", true);
+        this.cfg.getInt("history-interval", 300);
+        this.cfg.getInt("history-length", 3600);
+        this.cfg.save();
+    }
+
+    public boolean isVerbose() {
+        return this.cfg.getBoolean("verbose", false);
+    }
+
+    public boolean isEnabled() {
+        return this.cfg.getBoolean("enabled", true);
+    }
+
+    public int getHistoryInterval() {
+        return this.cfg.getInt("history-interval", 300);
+    }
+
+    public int getHistoryLength() {
+        return this.cfg.getInt("history-length", 3600);
+    }
+
+}
-- 
2.10.0

